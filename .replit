compile = "make -s"

run = "./main"
entrypoint = "main.cpp"
hidden = ["main", "**/*.o", "**/*.d", ".ccls-cache", "Makefile"]

[nix]
channel = "stable-24_05"

[gitHubImport]
requiredFiles = [".replit", "replit.nix", ".ccls-cache"]

[debugger]
support = true

[debugger.compile]
command = ["make", "main-debug"]
noFileArgs = true

[debugger.interactive]
transport = "stdio"
startCommand = ["dap-cpp"]

[debugger.interactive.initializeMessage]
command = "initialize"
type = "request"

[debugger.interactive.initializeMessage.arguments]
adapterID = "cppdbg"
clientID = "replit"
clientName = "replit.com"
columnsStartAt1 = true
linesStartAt1 = true
locale = "en-us"
pathFormat = "path"
supportsInvalidatedEvent = true
supportsProgressReporting = true
supportsRunInTerminalRequest = true
supportsVariablePaging = true
supportsVariableType = true

[debugger.interactive.launchMessage]
command = "launch"
type = "request"

[debugger.interactive.launchMessage.arguments]
MIMode = "gdb"
arg = []
cwd = "."
environment = []
externalConsole = false
logging = {}
miDebuggerPath = "gdb"
name = "g++ - Build and debug active file"
program = "./main-debug"
request = "launch"
setupCommands = [
	{ description = "Enable pretty-printing for gdb", ignoreFailures = true, text = "-enable-pretty-printing" }
]
stopAtEntry = false
type = "cppdbg"

[languages]

[languages.cpp]
pattern = "**/*.{cpp,h}"

[languages.cpp.languageServer]
start = "ccls"

[workflows]
runButton = "Web Simulator"

[[workflows.workflow]]
name = "Build and Run"
author = 18652289
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "make"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "./smart_meter_simulator"

[[workflows.workflow]]
name = "Build and Run Extended Simulator"
author = 18652289
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "pkg-config --cflags --libs Qt5Widgets Qt5Gui Qt5Core > qt_flags.txt"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "g++ -std=c++17 -g -Wall $(cat qt_flags.txt) -fPIC -o smart_meter_simulator main.cpp simulator_core.cpp mcu_emulator.cpp metering_engine.cpp protocol_handler.cpp component_library.cpp property_editor.cpp measurement_tools.cpp extended_mcu_support.cpp"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "./smart_meter_simulator"

[[workflows.workflow]]
name = "Web Simulator"
author = 18652289
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "pip install -r requirements.txt"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python app.py"
